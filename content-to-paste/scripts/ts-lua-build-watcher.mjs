#!/usr/bin/env zx

import { $ } from 'zx';

const chokidar = require('chokidar');

const srcPaths = [
  './ts-lua',
  './ts-lua-types',
];

const srcOutPath = './ts-lua-out';
const targetOutPath = './data/scripts/ts-lua-out';
const luaLibBundleSrcPath = './ts-lua-out/lualib_bundle.lua';
const luaLibBundleTargetPath = './data/lib/lualib_bundle.lua';
const luaRequireLib = 'data/lib/lualib_bundle';

const watcher = chokidar.watch(srcPaths, {
  ignored: /(^|[\/\\])\../,
  persistent: true,
});

await $`rm -rf ${srcOutPath}`;
await $`rm -rf ${targetOutPath}`;

watcher.on('change', (path) => {
  console.log(`File ${path} has been changed`);
  execute();
});

watcher.on('ready', () => {
  console.log('Initial scan complete. Ready for changes');
  execute();
});

watcher.on('error', (error) => {
  console.log(`Watcher error: ${error}`);
});

let isExecuting = false;

async function execute() {
  if (isExecuting) {
    return;
  }
  isExecuting = true;
  try {
    console.log('---------------------');
    console.log('Executing...');
    // Compiles the TypeScript code to Lua
    await $`tstl`.catch((error) => {});

    // Adds a comment to the beginning of `lualib_bundle.lua`
    const comment = `
-- ---------------------
-- DO NOT EDIT THIS FILE
-- This file is automatically generated by 
-- scripts/ts-lua-build-watcher.mjs every time a file in the
-- ts-lua directory is changed.
-- ---------------------
    `.trim();
    await runQuiet(() => {
      return $`echo ${comment} | cat - ${luaLibBundleSrcPath} > temp && mv temp ${luaLibBundleSrcPath}`.catch((error) => {});
    });
    console.log(`$ Added header comment to ${luaLibBundleSrcPath}`);

    // Move `lualib_bundle.lua` to target directory
    await $`mv ${luaLibBundleSrcPath} ${luaLibBundleTargetPath}`.catch((error) => {});

    await updateRequireLuaLibBundleInLuaFiles();

    // Copies the compiled Lua code to the target directory
    await $`cp -r ${srcOutPath} ./data/scripts`.catch((error) => {});

  } finally {
    console.log('---------------------');
    isExecuting = false;
  }
}

async function updateRequireLuaLibBundleInLuaFiles() {
  await runQuiet(async () => {
    // Find all Lua files in the output directory
    const luaFiles = (await $`find ${srcOutPath} -name '*.lua'`.catch((error) => {})).stdout;

    const phraseToReplace = 'require("lualib_bundle")';
    const replacement = `require("${luaRequireLib}")`.replaceAll('/', '\\/');
    runWithoutAddingStuffToStringInterpolation(() => {
      for (const luaFile of luaFiles.split('\n').filter(Boolean)) {
        // Replace "require("lualib_bundle")" with "require("lib/lualib_bundle")"
        $`sed -i 's/${phraseToReplace}/${replacement}/g' ${luaFile}`;
      }
    });
    console.log('$ Updated require statements in Lua files');
  });
}

async function runWithoutAddingStuffToStringInterpolation(callback) {
  const quoteEscaping = $.quote;
  $.quote = (command) => command;
  try {
    return await callback();
  } finally {
    $.quote = quoteEscaping;
  }
}

async function runQuiet(callback) {
  const log = $.log;
  $.log = (entry) => {
    if (entry.kind === 'stderr') {
      console.error(entry.data.toString());
    }
  };
  try {
    return await callback();
  } finally {
    $.log = log;
  }
}
